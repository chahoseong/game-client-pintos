            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

struct sleep_thread
  {
    struct list_elem elem;
    struct thread* owner;
    int64_t end_ticks;
    struct semaphore alarm;
  };

static struct list sleep_thread_list;
static struct lock sleep_thread_lock;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
-- timer_sleep() --
* 요청한 ticks 값이 0보다 큰 경우에만 실행합니다.
1. sleep_thread 구조체를 만들고, 현재 스레드의 주소와 깨어날 시간(end_ticks)을 설정합니다.
2. 현재 interrupt가 켜져있는지 검사합니다. (ASSERT)
3. sleep_thread 구조체 멤버인 세마포어(alarm)를 0으로 초기화합니다.
4. 공유 변수인 sleep_thread_list를 사용하기 전에 lock을 획득합니다.
5. sleep_thread_list에 아까 생성한 sleep_thread 구조체를 추가합니다. (push_back)
6. 획득했던 lock을 해제합니다.
7. 세마포어의 값을 하나 감소시킵니다. (0으로 초기화 됐기 때문에 현재 스레드는 블록됩니다.)
-- timer_interrupt() -- 
1. sleep_thread_list에 원소가 있는지 검사합니다.
2. sleep_thread_list에 원소가 있다면?
2-1. sleep_thread_list를 순회하면서 일어날 시간이 된 원소를 찾습니다.
2-2. 해당 원소는 리스트에서 제거하고, 세마포어의 값을 하나 증가시킵니다. (이를 통해 블록당한 스레드를 대기 상태로 만듭니다.)

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
sleep_thread_list에 넣을 때, 우선순위가 높은 순서대로 추가하면 리스트를 전부 다
순회하지 않아도 됩니다.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
lock을 사용해서 sleep_thread_list를 갱신할 때 하나의 스레드만 접근하도록 합니다.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
timer_sleep() 함수에서 sleep_thread_list에 현재 스레드를 추가하는 도중에
timer interrupt가 발생할 수 있습니다. 이 경우에 timer interrupt에서 sleep_thread_list에
추가된 원소들의 end_ticks을 검사할 때, 세마포어의 값이 아직 0인 경우에는 
검사를 하지 않고 넘어갑니다. 이를 통해서 sema_down을 진행하기 전에 timer interrupt에서
sema_up을 호출해서 영원히 잠드는 경우를 방지할 수 있습니다.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
semaphore를 0으로 초기화하여 사용하면, 자연스럽게 해당 스레드를 블록시킬 수 있습니다.
이를 통해 CPU 시간을 사용하지 않고 일정 시간동안 실행을 지연할 수 있습니다.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread
{
  ...

  int captured_priority;
  struct thread *donated_to;
  struct list donation_list;
  struct list_elem donation_elem;
  
  ...
};

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
donation_list를 통해 현재 스레드의 우선순위가 기부받은 우선순위인지 확인합니다.

==== nested donation ====
donated_to 포인터가 해당 스레드가 빌려준 스레드의 주소를 갖고 있습니다.
이 포인터를 통해 nested donation을 구현합니다.
----------------                 --------------------
| t0           |                 | t1               |
| priority: 32 | --donated_to--> | priority: 31->32 | 
----------------                 --------------------
----------------                 --------------------                 ------------------------
| t2           |                 | t0               |                 | t1                   |
| priority: 33 | --donated_to--> | priority: 32->33 | --donated_to--> | priority: 31->32->33 |
----------------                 --------------------                 ------------------------


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
스레드를 깨울 때, 우선 순위가 가장 높은 스레드를 찾아서 깨웁니다.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
1. 우선 sema_try_down을 통해 lock 획득을 시도합니다.
2. 만약 lock을 획득하지 못했다면
2-1. lock을 점유한 스레드와 현재 스레드의 우선순위를 비교합니다.
2-2. 만약 현재 스레드의 우선순위가 더 높다면
2-2-1. 인터럽트을 비활성화합니다.
2-2-2. 현재 스레드의 우선순위를 lock을 점유한 스레드의 우선순위로 설정합니다.
2-2-3. lock을 점유한 스레드가 이전에 기부해준 스레드가 있다면 이 스레드의 우선순위도 앞서 기부받은 우선순위로 설정합니다. (이 부분은 재귀적으로 설정합니다.)
2-2-4. 현재 스레드의 donated_to 포인터를 기부 해준 스레드로 설정합니다.
2-2-5. ready_list를 우선순위가 높은 순서대로 정렬합니다.
2-2-6. 인터럽트 레벨 설정을 이전으로 돌립니다.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
1. lock을 기다리고 있는 스레드를 순회하면서 (이 리스트는 우선순위가 높은 순서대로 정렬되어 있습니다.)
1-1. 해당 스레드가 현재 스레드에게 우선순위를 기부해준 스레드인지 검사합니다.
1-2. 맞다면 해당 스레드를 donation_list에서 제거합니다.
2. donation_list에 남은 원소가 있다면
2-1. 그 중에서 가장 우선순위가 높은 스레드를 찾아서 그 스레드의 우선순위로 해당 스레드의 우선순위를 설정합니다.
3. donation_list에 남은 원소가 없다면
3-1. 기부 받기 전에 설정된 우선순위로 현재 스레드의 우선순위를 설정합니다.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
priority를 변경할 때, ready_list에 가장 앞에 있는 스레드와 우선순위를 비교하여
해당 우선순위보다 변경된 우선순위가 더 낮으면 현재 스레드가 CPU를 양보하는데 
이 과정에서 race condtion이 발생할 수 있을 것 같습니다. 따라서 ready_list를 읽기전에
lock을 획득하고 양보 조건을 만족해서 양보하기 전에 lock을 해제하고 양보를 하면
race condition을 해결할 수 있습니다.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
lock 해제할 때, 기부 받은 우선순위를 다시 되돌리기 위해서 captured_priority 변수와
donation_list 변수가 필요했습니다. donation_list는 기부를 여러 스레드에게 받을 경우
해당 lock을 기다리는 스레드에게 기부 받은 우선순위를 반납하기 위해서 필요합니다.
그리고 nested donation 기능을 구현하기 위해 donated_to 변수가 필요했습니다. 이를 통해
우선순위를 기부 중인 스레드가 기부를 받았을 때, donated_to 변수를 통해서 전파를 할 수 있었습니다.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
